/* tslint:disable */
/* eslint-disable */
/**
 * Course Management API
 * API for managing courses, modules, and lessons.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * Unique identifier of the course
     * @type {string}
     * @memberof Course
     */
    'id'?: string;
    /**
     * Title of the course
     * @type {string}
     * @memberof Course
     */
    'title'?: string;
    /**
     * Description of the course
     * @type {string}
     * @memberof Course
     */
    'description'?: string;
    /**
     * Photo ID for the course
     * @type {string}
     * @memberof Course
     */
    'photoId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface Lesson
 */
export interface Lesson {
    /**
     * Unique identifier of the lesson
     * @type {string}
     * @memberof Lesson
     */
    'id'?: string;
    /**
     * Title of the lesson
     * @type {string}
     * @memberof Lesson
     */
    'title'?: string;
    /**
     * Description of the lesson
     * @type {string}
     * @memberof Lesson
     */
    'description'?: string;
    /**
     * Photo ID for the lesson
     * @type {string}
     * @memberof Lesson
     */
    'photoId'?: string;
    /**
     * URL to the lesson video
     * @type {string}
     * @memberof Lesson
     */
    'videoUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lesson
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Lesson
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface Module
 */
export interface Module {
    /**
     * Unique identifier of the module
     * @type {string}
     * @memberof Module
     */
    'id'?: string;
    /**
     * Title of the module
     * @type {string}
     * @memberof Module
     */
    'title'?: string;
    /**
     * Description of the module
     * @type {string}
     * @memberof Module
     */
    'description'?: string;
    /**
     * Photo ID for the module
     * @type {string}
     * @memberof Module
     */
    'photoId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Module
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Module
     */
    'updatedAt'?: string;
}

/**
 * CoursesApi - axios parameter creator
 * @export
 */
export const CoursesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete course by ID
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesCourseIdDelete: async (courseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('coursesCourseIdDelete', 'courseId', courseId)
            const localVarPath = `/courses/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get course by ID
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesCourseIdGet: async (courseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('coursesCourseIdGet', 'courseId', courseId)
            const localVarPath = `/courses/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update course by ID
         * @param {string} courseId 
         * @param {Course} course 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesCourseIdPut: async (courseId: string, course: Course, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('coursesCourseIdPut', 'courseId', courseId)
            // verify required parameter 'course' is not null or undefined
            assertParamExists('coursesCourseIdPut', 'course', course)
            const localVarPath = `/courses/{courseId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(course, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new course
         * @param {Course} course 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesPost: async (course: Course, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'course' is not null or undefined
            assertParamExists('coursesPost', 'course', course)
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(course, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoursesApi - functional programming interface
 * @export
 */
export const CoursesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoursesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete course by ID
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesCourseIdDelete(courseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesCourseIdDelete(courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.coursesCourseIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get course by ID
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesCourseIdGet(courseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesCourseIdGet(courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.coursesCourseIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update course by ID
         * @param {string} courseId 
         * @param {Course} course 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesCourseIdPut(courseId: string, course: Course, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesCourseIdPut(courseId, course, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.coursesCourseIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Course>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.coursesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new course
         * @param {Course} course 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesPost(course: Course, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesPost(course, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.coursesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CoursesApi - factory interface
 * @export
 */
export const CoursesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoursesApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete course by ID
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesCourseIdDelete(courseId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.coursesCourseIdDelete(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get course by ID
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesCourseIdGet(courseId: string, options?: RawAxiosRequestConfig): AxiosPromise<Course> {
            return localVarFp.coursesCourseIdGet(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update course by ID
         * @param {string} courseId 
         * @param {Course} course 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesCourseIdPut(courseId: string, course: Course, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.coursesCourseIdPut(courseId, course, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Course>> {
            return localVarFp.coursesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new course
         * @param {Course} course 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesPost(course: Course, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.coursesPost(course, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
export class CoursesApi extends BaseAPI {
    /**
     * 
     * @summary Delete course by ID
     * @param {string} courseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesCourseIdDelete(courseId: string, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesCourseIdDelete(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get course by ID
     * @param {string} courseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesCourseIdGet(courseId: string, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesCourseIdGet(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update course by ID
     * @param {string} courseId 
     * @param {Course} course 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesCourseIdPut(courseId: string, course: Course, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesCourseIdPut(courseId, course, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all courses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesGet(options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new course
     * @param {Course} course 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public coursesPost(course: Course, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).coursesPost(course, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LessonsApi - axios parameter creator
 * @export
 */
export const LessonsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get lessons of a module
         * @param {string} moduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modulesModuleIdLessonsGet: async (moduleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'moduleId' is not null or undefined
            assertParamExists('modulesModuleIdLessonsGet', 'moduleId', moduleId)
            const localVarPath = `/modules/{moduleId}/lessons`
                .replace(`{${"moduleId"}}`, encodeURIComponent(String(moduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete lesson
         * @param {string} moduleId 
         * @param {string} lessonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modulesModuleIdLessonsLessonIdDelete: async (moduleId: string, lessonId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'moduleId' is not null or undefined
            assertParamExists('modulesModuleIdLessonsLessonIdDelete', 'moduleId', moduleId)
            // verify required parameter 'lessonId' is not null or undefined
            assertParamExists('modulesModuleIdLessonsLessonIdDelete', 'lessonId', lessonId)
            const localVarPath = `/modules/{moduleId}/lessons/{lessonId}`
                .replace(`{${"moduleId"}}`, encodeURIComponent(String(moduleId)))
                .replace(`{${"lessonId"}}`, encodeURIComponent(String(lessonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a lesson to a module
         * @param {string} moduleId 
         * @param {Lesson} lesson 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modulesModuleIdLessonsPost: async (moduleId: string, lesson: Lesson, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'moduleId' is not null or undefined
            assertParamExists('modulesModuleIdLessonsPost', 'moduleId', moduleId)
            // verify required parameter 'lesson' is not null or undefined
            assertParamExists('modulesModuleIdLessonsPost', 'lesson', lesson)
            const localVarPath = `/modules/{moduleId}/lessons`
                .replace(`{${"moduleId"}}`, encodeURIComponent(String(moduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lesson, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LessonsApi - functional programming interface
 * @export
 */
export const LessonsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LessonsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get lessons of a module
         * @param {string} moduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modulesModuleIdLessonsGet(moduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Lesson>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modulesModuleIdLessonsGet(moduleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LessonsApi.modulesModuleIdLessonsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete lesson
         * @param {string} moduleId 
         * @param {string} lessonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modulesModuleIdLessonsLessonIdDelete(moduleId: string, lessonId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modulesModuleIdLessonsLessonIdDelete(moduleId, lessonId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LessonsApi.modulesModuleIdLessonsLessonIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add a lesson to a module
         * @param {string} moduleId 
         * @param {Lesson} lesson 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modulesModuleIdLessonsPost(moduleId: string, lesson: Lesson, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modulesModuleIdLessonsPost(moduleId, lesson, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LessonsApi.modulesModuleIdLessonsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LessonsApi - factory interface
 * @export
 */
export const LessonsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LessonsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get lessons of a module
         * @param {string} moduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modulesModuleIdLessonsGet(moduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Lesson>> {
            return localVarFp.modulesModuleIdLessonsGet(moduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete lesson
         * @param {string} moduleId 
         * @param {string} lessonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modulesModuleIdLessonsLessonIdDelete(moduleId: string, lessonId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modulesModuleIdLessonsLessonIdDelete(moduleId, lessonId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a lesson to a module
         * @param {string} moduleId 
         * @param {Lesson} lesson 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modulesModuleIdLessonsPost(moduleId: string, lesson: Lesson, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modulesModuleIdLessonsPost(moduleId, lesson, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LessonsApi - object-oriented interface
 * @export
 * @class LessonsApi
 * @extends {BaseAPI}
 */
export class LessonsApi extends BaseAPI {
    /**
     * 
     * @summary Get lessons of a module
     * @param {string} moduleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonsApi
     */
    public modulesModuleIdLessonsGet(moduleId: string, options?: RawAxiosRequestConfig) {
        return LessonsApiFp(this.configuration).modulesModuleIdLessonsGet(moduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete lesson
     * @param {string} moduleId 
     * @param {string} lessonId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonsApi
     */
    public modulesModuleIdLessonsLessonIdDelete(moduleId: string, lessonId: string, options?: RawAxiosRequestConfig) {
        return LessonsApiFp(this.configuration).modulesModuleIdLessonsLessonIdDelete(moduleId, lessonId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a lesson to a module
     * @param {string} moduleId 
     * @param {Lesson} lesson 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonsApi
     */
    public modulesModuleIdLessonsPost(moduleId: string, lesson: Lesson, options?: RawAxiosRequestConfig) {
        return LessonsApiFp(this.configuration).modulesModuleIdLessonsPost(moduleId, lesson, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ModulesApi - axios parameter creator
 * @export
 */
export const ModulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get modules of a course
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesCourseIdModulesGet: async (courseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('coursesCourseIdModulesGet', 'courseId', courseId)
            const localVarPath = `/courses/{courseId}/modules`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete module
         * @param {string} courseId 
         * @param {string} moduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesCourseIdModulesModuleIdDelete: async (courseId: string, moduleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('coursesCourseIdModulesModuleIdDelete', 'courseId', courseId)
            // verify required parameter 'moduleId' is not null or undefined
            assertParamExists('coursesCourseIdModulesModuleIdDelete', 'moduleId', moduleId)
            const localVarPath = `/courses/{courseId}/modules/{moduleId}`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)))
                .replace(`{${"moduleId"}}`, encodeURIComponent(String(moduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a module to a course
         * @param {string} courseId 
         * @param {Module} module 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesCourseIdModulesPost: async (courseId: string, module: Module, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseId' is not null or undefined
            assertParamExists('coursesCourseIdModulesPost', 'courseId', courseId)
            // verify required parameter 'module' is not null or undefined
            assertParamExists('coursesCourseIdModulesPost', 'module', module)
            const localVarPath = `/courses/{courseId}/modules`
                .replace(`{${"courseId"}}`, encodeURIComponent(String(courseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(module, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModulesApi - functional programming interface
 * @export
 */
export const ModulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModulesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get modules of a course
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesCourseIdModulesGet(courseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Module>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesCourseIdModulesGet(courseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModulesApi.coursesCourseIdModulesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete module
         * @param {string} courseId 
         * @param {string} moduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesCourseIdModulesModuleIdDelete(courseId: string, moduleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesCourseIdModulesModuleIdDelete(courseId, moduleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModulesApi.coursesCourseIdModulesModuleIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add a module to a course
         * @param {string} courseId 
         * @param {Module} module 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coursesCourseIdModulesPost(courseId: string, module: Module, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coursesCourseIdModulesPost(courseId, module, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModulesApi.coursesCourseIdModulesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ModulesApi - factory interface
 * @export
 */
export const ModulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModulesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get modules of a course
         * @param {string} courseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesCourseIdModulesGet(courseId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Module>> {
            return localVarFp.coursesCourseIdModulesGet(courseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete module
         * @param {string} courseId 
         * @param {string} moduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesCourseIdModulesModuleIdDelete(courseId: string, moduleId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.coursesCourseIdModulesModuleIdDelete(courseId, moduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a module to a course
         * @param {string} courseId 
         * @param {Module} module 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coursesCourseIdModulesPost(courseId: string, module: Module, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.coursesCourseIdModulesPost(courseId, module, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ModulesApi - object-oriented interface
 * @export
 * @class ModulesApi
 * @extends {BaseAPI}
 */
export class ModulesApi extends BaseAPI {
    /**
     * 
     * @summary Get modules of a course
     * @param {string} courseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModulesApi
     */
    public coursesCourseIdModulesGet(courseId: string, options?: RawAxiosRequestConfig) {
        return ModulesApiFp(this.configuration).coursesCourseIdModulesGet(courseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete module
     * @param {string} courseId 
     * @param {string} moduleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModulesApi
     */
    public coursesCourseIdModulesModuleIdDelete(courseId: string, moduleId: string, options?: RawAxiosRequestConfig) {
        return ModulesApiFp(this.configuration).coursesCourseIdModulesModuleIdDelete(courseId, moduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a module to a course
     * @param {string} courseId 
     * @param {Module} module 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModulesApi
     */
    public coursesCourseIdModulesPost(courseId: string, module: Module, options?: RawAxiosRequestConfig) {
        return ModulesApiFp(this.configuration).coursesCourseIdModulesPost(courseId, module, options).then((request) => request(this.axios, this.basePath));
    }
}



